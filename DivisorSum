#include <iostream>

using namespace std;
#include <bits/stdc++.h>
#include <iostream>
#define MAX 32000

using namespace std;

using ll = long long;

vector<int> primes;

void sieve(int n) {
    bool isPrime[MAX];
    memset(isPrime,true,sizeof(isPrime));
    for (int i = 3; i * i <= MAX; i += 2) {
        if (isPrime[i]) {
            for (int j = i * i; j <= MAX; j += i) {
                isPrime[j] = false;
            }
        }
    }
    primes.push_back(2);
    for (int i = 3; i < MAX; i += 2) {
        if (isPrime[i]) primes.push_back(i);
    }
}

int divisorSum1(int n) {
    int cnt = 0;
    for (int i = 1; i * i <= n; i++) {
        if (i * i == n) {
            cnt += 2*n;
        } else if (n % i == 0) {
            cnt += (i + n/i);
        }
    }
    return cnt;
}

int divisorSum2(int n) {
    if (n < 1) return 0;
    sieve(n+1);
    int sum = 1;
    for (int i = 0; primes[i]*primes[i] <= n; i++) {
        if (n % primes[i] == 0) {
            int cnt = 1;
            while (n % primes[i] == 0) {
                n /= primes[i];
                cnt++;
            }
            sum *= (pow(primes[i], cnt) - 1) / (primes[i] - 1);
        }
    }
    if (n > 1) sum *= (pow(n, 2) - 1) / (n - 1);
    return sum;
}
int main(){
    cout<<divisorSum2(18);
    return 0;
}
